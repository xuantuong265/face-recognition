# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'attendance.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

from create_student import CreateStudent
import mysql.connector
import cv2
import os
import pickle
import numpy as np
from PIL import Image


class Attendance(object):

    def setupUi(self, MainWindow, ID):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)

        self.IDSubject = ID

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(270, 60, 261, 41))

        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)

        self.label.setFont(font)
        self.label.setObjectName("label")
        self.btnAttendance = QtWidgets.QPushButton(self.centralwidget)
        self.btnAttendance.setGeometry(QtCore.QRect(80, 210, 171, 131))
        self.btnAttendance.setObjectName("btnAttendance")
        self.btnAttendance.clicked.connect(self.attendance)

        self.btnTrainData = QtWidgets.QPushButton(self.centralwidget)
        self.btnTrainData.setGeometry(QtCore.QRect(290, 210, 181, 131))
        self.btnTrainData.setObjectName("btnTrainData")
        self.btnTrainData.clicked.connect(self.trainData)

        self.btnCreateStudent = QtWidgets.QPushButton(self.centralwidget)
        self.btnCreateStudent.setGeometry(QtCore.QRect(510, 210, 181, 131))
        self.btnCreateStudent.setObjectName("btnCreateStudent")
        self.btnCreateStudent.clicked.connect(self.switchScreemCreate)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 31))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "System Attendance"))
        self.btnAttendance.setText(_translate("MainWindow", "Attendance"))
        self.btnTrainData.setText(_translate("MainWindow", "Train Data"))
        self.btnCreateStudent.setText(_translate("MainWindow", "Create Student"))

    #create data
    def switchScreemCreate(self):

        # switch screem
        self.window = QtWidgets.QMainWindow()
        self.ui = CreateStudent()
        self.ui.setupUi(self.window)
        self.window.show()


    #train data
    def getImage(self):

        pathMasv = self.getLastStudent()

        path = 'G:/TAI LIEU/doan04/dataSet/' + pathMasv

        print(path)

        #get path img
        imagePaths = []
        for root, dirs, files in os.walk(path):
            for f in files:
                imagePaths.append(os.path.join(root, f))

        faces = []
        IDs = []

        for imagePath in imagePaths:
            # loading the image and converting it to gray scale
            faceImg = Image.open(imagePath).convert('L')
            # converting the PIL image into numpy array
            faceNp = np.array(faceImg, 'uint8')

            # split to get ID of the image
            id = str(imagePath.split('\\')[1].split('.')[1])

            #add
            faces.append(faceNp)
            IDs.append(int(id))

            cv2.imshow("traning", faceNp)
            cv2.waitKey(10)

        return faces, IDs

    def trainData(self):
        faces, id = self.getImage()

        recognizer = cv2.face.LBPHFaceRecognizer_create()
        recognizer.train(faces, np.array(id))

        if not os.path.exists('G:/TAI LIEU/doan04/recognizer'):
            os.makedirs('G:/TAI LIEU/doan04/recognizer')
        recognizer.save('G:/TAI LIEU/doan04/recognizer/trainningData.yml')

        cv2.destroyAllWindows()

        self.showDialog("Train Data Finish !")


    #Attendance
    def attendance(self):

        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
        recognizer = cv2.face.LBPHFaceRecognizer_create()
        recognizer.read('G:/TAI LIEU/doan04/recognizer/trainningData.yml')

        # access webcam
        cap = cv2.VideoCapture(0)
        font_face = cv2.FONT_HERSHEY_SIMPLEX

        while (True):
            ret, frame = cap.read()
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.3, 5)

            for (x, y, w, h) in faces:
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

                roi_gray = gray[y:y + h, x:x + w]
                id, confidence = recognizer.predict(roi_gray)

                if (confidence < 40):
                    profile = self.getInfoStudent(id)

                    if (profile != None):

                        #update status student
                        self.updateInfoStudent(self.IDSubject, id)

                        cv2.putText(frame, "" + str(profile[2]), (x + 10, y + h + 30), font_face, 1, (0, 255, 0), 2)
                else:
                    cv2.putText(frame, "Unknow", (x + 10, y + h + 30), font_face, 1, (0, 255, 0), 2)


            cv2.imshow("DETECTING FACE", frame)
            if (cv2.waitKey(1) & 0xFF == ord('q')):
                break

        cap.release()
        cv2.destroyAllWindows()

    #update student
    def updateInfoStudent(self, IDSubject, IDStudent):

        db = mysql.connector.connect(user='root', password='', host='localhost', database='opencv')
        cursor = db.cursor()

        sql = "UPDATE attendance SET status = 1 WHERE id_student = '"+str(IDStudent)+"'AND id_subject = '"+str(IDSubject)+"' "

        cursor.execute(sql)

        db.commit()

        db.close()

        print("success")


    #get info student
    def getInfoStudent(self, id):

        db = mysql.connector.connect(user='root', password='', host='localhost', database='opencv')
        cursor = db.cursor()

        query = "SELECT * FROM `students` WHERE id = " + str(id)
        cursor.execute(query)

        profile = None

        for data in cursor:
            profile = data

        db.close()
        return profile

    # get last student
    def getLastStudent(self):

        db = mysql.connector.connect(user='root', password='', host='localhost', database='opencv')
        cursor = db.cursor()

        row = ''

        query = "SELECT * FROM `students` ORDER BY id DESC LIMIT 1"

        cursor.execute(query)

        result = cursor.fetchall()

        for data in result:
            row = data[1]

        db.close()
        return row

    # show dialog
    def showDialog(self, message):
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText(message)
        msgBox.setWindowTitle("Message")
        msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)

        x = msgBox.exec_()

        print("hoan thanh ")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Attendance()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
