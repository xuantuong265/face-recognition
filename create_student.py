# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'create_student.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from turtle import done

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QDialog
import mysql.connector
import cv2
import os
import pickle
import numpy as np
from PIL import Image


class CreateStudent(object):

    def setupUi(self, Dialog):

        Dialog.setObjectName("Dialog")
        Dialog.resize(558, 426)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(200, 10, 191, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)

        self.label.setFont(font)
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(50, 100, 68, 19))
        self.label_2.setObjectName("label_2")

        self.name = QtWidgets.QTextEdit(Dialog)
        self.name.setGeometry(QtCore.QRect(130, 90, 301, 41))
        self.name.setObjectName("name")

        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(50, 180, 68, 19))
        self.label_3.setObjectName("label_3")

        self.masv = QtWidgets.QTextEdit(Dialog)
        self.masv.setGeometry(QtCore.QRect(130, 170, 301, 41))
        self.masv.setObjectName("masv")

        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(50, 250, 68, 19))
        self.label_4.setObjectName("label_4")

        self.cbClassroom = QtWidgets.QComboBox(Dialog)
        self.cbClassroom.setGeometry(QtCore.QRect(130, 250, 92, 25))
        self.cbClassroom.setObjectName("cbClassroom")
        self.displayClassroom()

        self.btnOK = QtWidgets.QPushButton(Dialog)
        self.btnOK.setGeometry(QtCore.QRect(130, 330, 112, 34))
        self.btnOK.setObjectName("btnOK")
        self.btnOK.clicked.connect(self.create)

        self.btnCancel = QtWidgets.QPushButton(Dialog)
        self.btnCancel.setGeometry(QtCore.QRect(280, 330, 112, 34))
        self.btnCancel.setObjectName("btnCancel")
        self.btnCancel.clicked.connect(self.closeDialog)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Create Student"))
        self.label_2.setText(_translate("Dialog", "Name"))
        self.label_3.setText(_translate("Dialog", "MaSV"))
        self.label_4.setText(_translate("Dialog", "Classroom"))
        self.btnOK.setText(_translate("Dialog", "OK"))
        self.btnCancel.setText(_translate("Dialog", "Cancel"))

    #display classroom
    def displayClassroom(self):

        # connect db
        db = mysql.connector.connect(user='root', password='', host='localhost', database='opencv')
        cursor = db.cursor()

        query = ("SELECT * FROM `classroom`")
        cursor.execute(query)

        for data in cursor:
            self.cbClassroom.addItem(data[1], data[0])

        cursor.close()
        db.close()

    #create
    def create(self):

        name = self.name.toPlainText()
        masv = self.masv.toPlainText()
        id_classroom = self.cbClassroom.currentData()

        #add student
        # connect db
        db = mysql.connector.connect(user='root', password='', host='localhost', database='opencv')
        cursor = db.cursor()

        query = ("INSERT INTO `students` (`id`, `masv`, `name`, `id_classroom`) VALUES (null, '" + str(masv) + "', '" + str(
            name) + "', '" + str(id_classroom) + "');")

        cursor.execute(query)

        db.commit()

        #get id current
        self.getID(id_classroom, name, masv)


    def getID(self, id_classroom, name, masv):
        db = mysql.connector.connect(user='root', password='', host='localhost', database='opencv')
        cursor = db.cursor()

        sql = ("SELECT * FROM `students` ORDER BY id DESC LIMIT 1")
        cursor.execute(sql)

        for data in cursor:
            self.getSubject(id_classroom, data[0], name, masv)
            break

    def getSubject(self, id_classroom, id_student, name, masv):

        db = mysql.connector.connect(user='root', password='', host='localhost', database='opencv')
        cursor = db.cursor()

        query = ("SELECT * FROM `subject`")
        cursor.execute(query)

        for data in cursor:
            self.addAttendance(id_student, data[0])

        # add dataset
        self.addDataSet(name, masv, id_student)


    def addDataSet(self, name, masv, id_student):

        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

        #access webcam
        cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        font_face = cv2.FONT_HERSHEY_SIMPLEX
        sampleNum = 0

        while(True):
            ret, frame = cap.read()
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.3, 5)

            for(x, y, w, h) in faces:
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

                directory = str(masv)
                parent_dir = "G:/TAI LIEU/doan04/dataSet"
                path = os.path.join(parent_dir, directory)

                # if not os.path.exists(directory):
                os.makedirs(path, exist_ok=True)

                sampleNum += 1

                num = (sampleNum * 100) / 100

                cv2.putText(frame, "Loading " + str(num) + " %", (x + 10, y + h + 30), font_face, 1, (0, 255, 0), 2)

                a = cv2.imwrite('G:/TAI LIEU/doan04/dataSet/' + str(masv) + '/' + str(name) + '.' + str(id_student) + '.' + str(sampleNum) + '.jpg', gray[y:y + h, x:x + w])

            cv2.imshow("DETECTING FACE", frame)

            if (cv2.waitKey(1) & 0xFF == ord('q')):
                break

            if (sampleNum > 100):
                self.showDialog("Created !")
                break

        cap.release()
        cv2.destroyAllWindows()



    def addAttendance(self, id_student, id_subject):

        db = mysql.connector.connect(user='root', password='', host='localhost', database='opencv')
        cursor = db.cursor()

        sql = "INSERT INTO `attendance` (`id`, `id_student`, `id_subject`, `status`) " \
              "VALUES (null, '" + str(id_student) + "', '" + str(id_subject) + "', 0);"

        cursor.execute(sql)
        db.commit()

        # show dialog
    def showDialog(self, message):
        print('hello')
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText(message)
        msgBox.setWindowTitle("Message")
        msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)

        x = msgBox.exec_()

        print("hoan thanh ")

    #close dialog
    def closeDialog(self):
        print("hi")




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = CreateStudent()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
